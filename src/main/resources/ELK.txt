Setting Up ELK Stack for Monitoring
https://medium.com/@cyber_crispr/setting-up-elk-stack-for-monitoring-751f904df1a3

sudo apt-get install apt-transport-https

Import the Elasticsearch GPG Key
wget -qO - https://artifacts.elastic.co/GPG-KEY-elasticsearch | sudo gpg --dearmor -o /usr/share/keyrings/elasticsearch-keyring.gpg

Add the Elasticsearch repository to your sources list
echo "deb [signed-by=/usr/share/keyrings/elasticsearch-keyring.gpg] https://artifacts.elastic.co/packages/8.x/apt stable main" | sudo tee /etc/apt/sources.list.d/elastic-8.x.list

Now update APT source list before proceeding
sudo apt update -y

Installing and Configuring Elasticsearch
ubuntu@elk:~$ sudo apt-get install elasticsearch
Reading package lists... Done
Building dependency tree... Done
Reading state information... Done
The following NEW packages will be installed:
  elasticsearch
0 upgraded, 1 newly installed, 0 to remove and 2 not upgraded.
Need to get 635 MB of archives.
After this operation, 1,209 MB of additional disk space will be used.
Get:1 https://artifacts.elastic.co/packages/8.x/apt stable/main amd64 elasticsearch amd64 8.16.0 [635 MB]
Fetched 635 MB in 1min 42s (6,202 kB/s)
Selecting previously unselected package elasticsearch.
(Reading database ... 251264 files and directories currently installed.)
Preparing to unpack .../elasticsearch_8.16.0_amd64.deb ...
Creating elasticsearch group... OK
Creating elasticsearch user... OK
Unpacking elasticsearch (8.16.0) ...
Setting up elasticsearch (8.16.0) ...
--------------------------- Security autoconfiguration information ------------------------------

Authentication and authorization are enabled.
TLS for the transport and HTTP layers is enabled and configured.

The generated password for the elastic built-in superuser is : =3AV5b=0HiEMrhNDpRBP

If this node should join an existing cluster, you can reconfigure this with
'/usr/share/elasticsearch/bin/elasticsearch-reconfigure-node --enrollment-token <token-here>'
after creating an enrollment token on your existing cluster.

You can complete the following actions at any time:

Reset the password of the elastic built-in superuser with
'/usr/share/elasticsearch/bin/elasticsearch-reset-password -u elastic'.

Generate an enrollment token for Kibana instances with
 '/usr/share/elasticsearch/bin/elasticsearch-create-enrollment-token -s kibana'.

Generate an enrollment token for Elasticsearch nodes with
'/usr/share/elasticsearch/bin/elasticsearch-create-enrollment-token -s node'.

-------------------------------------------------------------------------------------------------
### NOT starting on installation, please execute the following statements to configure elasticsearch service to start automatically using systemd
 sudo systemctl daemon-reload
 sudo systemctl enable elasticsearch.service
### You can start elasticsearch service by executing
 sudo systemctl start elasticsearch.service

 Before Editing take backup
sudo cp /etc/elasticsearch/elasticsearch.yml /etc/elasticsearch/elasticsearch.yml.bak

$ sudo vim /etc/elasticsearch/elasticsearch.yml
network.host: localhost ##because we’ll install Logstash and Kibana on the same server.
network.port: 9200
cluster.name: my-cluster
node.name: node-1
discovery.type: single-node
cluster.initial_master_nodes: []
discovery.seed_hosts: [ ]


Then second step is go to the BEGIN SECURITY AUTO CONFIGURATION and here you need to replace this true with false as shown in below:
xpack.security.enabled: false


Use the following command to change the password of the user elastic
root@dlp:~# /usr/share/elasticsearch/bin/elasticsearch-reset-password -u elastic -i

Please note this user and password will be used inside the config files (kibana.yml, filebeat.yml etc.) as required.

Configure the JVM heap memory
If you want to limit used memory on your computer
sudo vim /etc/elasticsearch/jvm.options
-Xms512m
-Xmx512m


Then, you must reload, enable, and start the service.
sudo systemctl daemon-reload
sudo systemctl restart elasticsearch
sudo systemctl status elasticsearch
sudo systemctl enable elasticsearch

$ curl -X GET "http://localhost:9200"
$ journalctl -xe

sudo systemctl stop logstash – Stops the Logstash service.
sudo systemctl disable kibana

###Removes the package itself but leaves behind its configuration files and data
###This is useful if you plan to reinstall the package later and want to keep your configuration settings intact.
sudo apt remove logstash

###Removes the package and also removes all associated configuration files
###This is more thorough and is typically used if you want to completely eliminate all traces of the package, as if it was never installed.
sudo apt purge logstash – Removes the Logstash package.

sudo rm -rf /etc/logstash – Deletes Logstash configuration files.
sudo rm -rf /var/lib/logstash – Deletes Logstash data files.
sudo userdel logstash – Removes the Logstash user.
sudo groupdel logstash – Removes the Logstash group.
sudo rm /etc/apt/sources.list.d/elastic-7.x.list – Removes the Elastic APT repository.
sudo apt-get update – Updates the APT cache.


Remove Unused Dependencies
After removing Logstash, you may have some unused packages that can be cleaned up.
sudo apt autoremove



sudo apt-key list
sudo apt-key del <Logstash-GPG-key-ID>

Remove the Logstash repository from APT sources
sudo rm /etc/apt/sources.list.d/elastic-8.x.list


The apt-key command is deprecated in newer versions of Ubuntu, but it still works for most systems. In the future, the recommended way to manage repository keys is using /etc/apt/trusted.gpg.d/ or keyring files managed in /usr/share/keyrings/. However, for now, apt-key del is still a valid approach for removing keys.






#6.Uninstall Elasticsearch on Ubuntu
If you wants to uninstall elasticsearch then you run the below commands:

sudo apt-get --purge autoremove elasticsearch
sudo apt-get remove --purge elasticsearch
sudo rm -rf /etc/elasticsearch





If you want to see all containers, including those that are stopped, use the -a flag:
docker ps -a ###List all containers (running + stopped)
docker ps --format "{{.Names}}"
docker stop <container_id_or_name>
docker rm <container_id_or_name> #Remove containers
docker rmi -f <image_id_or_name>  #Remove images
docker image prune -a
