Update ServiceRegistryApplication.java file
........................................................................
// ServiceRegistryApplication.java
@SpringBootApplication
@EnableEurekaServer
public class ServiceRegistryApplication {

 public static void main(String[] args) {
  SpringApplication.run(ServiceRegistryApplication.class, args);
 }

}


Make Changes in Your application.properties File
........................................................................
# application.properties
# This name is used for identifying the application in the environment
spring.application.name=service-registry

# By default, Eureka Server uses port 8761 for communication with client applications.
# If you want you can change
server.port=8761

# Disables the Eureka client's capability to fetch the registry
# of other services from the Eureka server, as it is not acting as a Eureka client.
eureka.client.fetch-registry=false

# Disables the Eureka client's registration with the Eureka server.
# Since this application is the Eureka server itself,
# it does not need to register with any other Eureka server.
eureka.client.register-with-eureka=false






@EnableDiscoveryClient in CategoryServiceApplication class

@SpringBootApplication
@EnableDiscoveryClient
public class CategoryServiceApplication {

 public static void main(String[] args) {
  SpringApplication.run(CategoryServiceApplication.class, args);
 }

}
#    The URL of the Eureka Server where the application will register itself for service discovery.
eureka:
    client:
        serviceUrl:
            defaultZone: http://localhost:8761/eureka/


https://medium.com/javarevisited/getting-started-with-microservices-4266f440086f


Highly available Eureka cluster configuration
Assuming we have two Eureka server instances, the configuration might look like this:
application.yml
eureka:
  instance:
    hostname: eureka-server1
  client:
    registerWithEureka: true
    fetchRegistry: true
    serviceUrl:
      defaultZone: http://eureka-server2/eureka/

application.yml
eureka:
  instance:
    hostname: eureka-server2
  client:
    registerWithEureka: true
    fetchRegistry: true
    serviceUrl:
      defaultZone: http://eureka-server1/eureka/




A Deep Dive into Eureka Clients
eureka:
  client:
    serviceUrl:
      defaultZone: http://eureka-server1/eureka/,http://eureka-server2/eureka/
  instance:
    leaseRenewalIntervalInSeconds: 10
    leaseExpirationDurationInSeconds: 30

@EnableWebSecurity
public class WebSecurityConfig extends WebSecurityConfigurerAdapter {

    @Override
    protected void configure(HttpSecurity http) throws Exception {
	//http.csrf().ignoringAntMatchers("/eureka/**");
        http.csrf().disable()
            .authorizeRequests()
            .anyRequest().authenticated()
            .and()
            .httpBasic();
    }
}
spring:
  application:
    name: SpringCloud-eureka
  security:
    basic:
      enabled: true
    user:
      name: root
      password: root

