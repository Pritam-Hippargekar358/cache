<springProfile name="prod">
    <!-- enabled when the "prod" profile is active -->
</springProfile>
<springProfile name="dev | test">
    <!-- enabled when the "dev" or "test" profiles are active --></springProfile>
<springProfile name="!prod">
    <!-- enabled when the "prod" profile is not active -->
</springProfile>


<?xml version="1.0" encoding="UTF-8"?>
<configuration>
<include resource="org/springframework/boot/logging/logback/console-appender.xml" />
<appender name="FILE" class="ch.qos.logback.core.rolling.RollingFileAppender">
  <encoder>
    <pattern>${FILE_LOG_PATTERN}</pattern>
  </encoder>
  <file>temp/spring.log</file>
  <rollingPolicy class="ch.qos.logback.core.rolling.TimeBasedRollingPolicy"
  <fileNamePattern>temp/spring.log.%d</fileNamePattern>
  </rollingPolicy>
</appender>
<springProfile name="test | dev">
   <logger name="fp.spring" level="DEBUG" additivity="false">
       <appender-ref ref="CONSOLE" />
   </logger>
   <root level="DEBUG">
      <appender-ref ref="CONSOLE" />
      <appender-ref ref="FILE" />
   </root>
</springProfile>
<springProfile name="prod">
    <root level="INFO">
      <appender-ref ref="FILE" />
    </root>
</springProfile>
</configuration>


<encoder>
    <pattern>
        { "timestamp": "%d{yyyy-MM-dd HH:mm:ss.SSS}", "level": "%highlight(%-5level)", "message":%highlight("%msg"), "logger": "%logger.%M:%L", "ex" : [%replace(%replace("%ex"){'\n\t', '","'}){'\n', ''}] }%n%nopex
    </pattern>
</encoder>
{
    "timestamp": "2024-04-04 10:10:10.100",
    "level": "ERROR",
    "message": "get customer info service failed, trackId -123123 ",
    "logger": "az.demo.service.CustomerService.getCustomerInfo:27",
    "ex": [
        "java.lang.RuntimeException: Error occured!",
        "at az.demo.service.CustomerService.getCustomerInfo(CustomerService.java:23)",
        "at az.demo.Application.run(Application.java:22)",
        "at org.springframework.boot.SpringApplication.callRunner(SpringApplication.java:791)",
        "at org.springframework.boot.SpringApplication.callRunners(SpringApplication.java:775)",
        "at org.springframework.boot.SpringApplication.run(SpringApplication.java:345)",
        "at org.springframework.boot.SpringApplication.run(SpringApplication.java:1343)",
        "at org.springframework.boot.SpringApplication.run(SpringApplication.java:1332)",
        "at az.demo.Application.main(Application.java:15)"
    ]
}


<appender name="CONSOLE-JSON" class="ch.qos.logback.core.ConsoleAppender">
  <encoder class="net.logstash.logback.encoder.LoggingEventCompositeJsonEncoder">
    <providers>
        <arguments>
            <fieldName>context</fieldName>
        </arguments>
        <pattern>
          <pattern>
              {
              "date": "%date{ISO8601,GMT+2}",
              "priority": "%level",
              "pid": "${PID:- }",
              "thread": "%t",
              "logger": "%logger",
              "message": "%.-10000msg",
              "stacktrace": "%.-10000throwable",
              "team": "%property{team}"
              }
          </pattern>
        </pattern>
        <mdc>net.logstash.logback.composite.loggingevent.MdcJsonProvider</mdc>
    </providers>
  </encoder>
</appender>
try {
    // Code that might throw an exception
} catch (Exception ex) {
    logger.error("Error processing request: {}", ex.getMessage(), ex);
}
public class MDCFilter extends OncePerRequestFilter {

    @Override
    protected void doFilterInternal(HttpServletRequest request, HttpServletResponse response, FilterChain filterChain)
            throws ServletException, IOException {
        MDC.put("requestId", UUID.randomUUID().toString());
        MDC.put("userIp", request.getRemoteAddr());

        try {
            filterChain.doFilter(request, response);
        } finally {
            MDC.clear();
        }
    }
}
Asynchronous Logging for Improved Performance
<appender name="ASYNC" class="ch.qos.logback.classic.AsyncAppender">
    <appender-ref ref="FILE"/>
</appender>

<appender name="FILE" class="ch.qos.logback.core.FileAppender">
    <file>logs/myapp.log</file>
    <encoder>
        <pattern>%d{yyyy-MM-dd HH:mm:ss} %-5level %logger{36} - %msg%n</pattern>
    </encoder>
</appender>
https://medium.com/@ansujain/understanding-logging-in-java-services-with-log4j-bae3819bc461
https://signoz.io/guides/spring-boot-how-to-log-all-requests-and-responses-with-exceptions-in-single-place/
Integrating with Distributed Tracing Systems
Distributed tracing provides a way to track requests across multiple services, helping to understand performance bottlenecks and service interactions.

Integrate with systems like Jaeger or Zipkin to pass trace IDs across service boundaries.
Use libraries or frameworks that support distributed tracing to automatically capture and report trace data.


https://faun.pub/java-23-springboot-3-3-4-logback-setup-part-3-c2ffe2d0a358
<appender name="FILE" class="ch.qos.logback.core.rolling.RollingFileAppender">
    <file>logs/application.log</file>
    <rollingPolicy class="ch.qos.logback.core.rolling.SizeAndTimeBasedRollingPolicy">
        <fileNamePattern>logs/application-%d{yyyy-MM-dd}.%i.log</fileNamePattern>
        <maxFileSize>10MB</maxFileSize>
        <maxHistory>30</maxHistory>
    </rollingPolicy>
    <encoder class="net.logstash.logback.encoder.LoggingEventCompositeJsonEncoder">
        <providers>
            <timestamp/>
            <loggerName/>
            <logLevel/>
            <message/>
            <threadName/>
            <context/>
            <mdc/>
        </providers>
    </encoder>
</appender>